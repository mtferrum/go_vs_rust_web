% –í–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞ Prolog
% –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å Go, Rust –∏ Forth

:- use_module(library(http/thread_httpd)).
:- use_module(library(http/http_dispatch)).
:- use_module(library(http/http_parameters)).
:- use_module(library(http/http_json)).
:- use_module(library(http/json)).
:- use_module(library(http/cors)).

% –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
server_port(8083).

% –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user(1, "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", "ivan@example.com", 25, "2024-01-01T10:00:00Z").
user(2, "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞", "maria@example.com", 30, "2024-01-02T11:00:00Z").
user(3, "–ê–ª–µ–∫—Å–µ–π –°–∏–¥–æ—Ä–æ–≤", "alex@example.com", 28, "2024-01-03T12:00:00Z").

% –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
get_all_users(Users) :-
    findall(
        json([id=Id, name=Name, email=Email, age=Age, created_at=CreatedAt]),
        user(Id, Name, Email, Age, CreatedAt),
        Users
    ).

% –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
get_user_by_id(Id, User) :-
    user(Id, Name, Email, Age, CreatedAt),
    User = json([id=Id, name=Name, email=Email, age=Age, created_at=CreatedAt]).

% –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_exists(Id) :-
    user(Id, _, _, _, _).

% –°–æ–∑–¥–∞—Ç—å JSON –æ—Ç–≤–µ—Ç
create_response(Success, Message, Data, Response) :-
    Response = json([
        success=Success,
        message=Message,
        data=Data
    ]).

% –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
handle_root(_Request) :-
    Endpoints = [
        "GET / - –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
        "GET /users - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        "GET /users/{id} - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID",
        "POST /users - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        "PUT /users/{id} - –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        "DELETE /users/{id} - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    ],
    HomeData = json([
        version="1.0.0",
        endpoints=Endpoints
    ]),
    create_response(true, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ API –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ Prolog!", HomeData, Response),
    cors_enable,
    reply_json(Response).

% –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
handle_users(_Request) :-
    get_all_users(Users),
    create_response(true, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã", Users, Response),
    cors_enable,
    reply_json(Response).

% –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
handle_user_id(Request) :-
    http_parameters(Request, [id(Id, [integer])]),
    (   user_exists(Id)
    ->  get_user_by_id(Id, User),
        create_response(true, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω", User, Response)
    ;   create_response(false, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", null, Response)
    ),
    cors_enable,
    reply_json(Response).

% –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
handle_create_user(Request) :-
    http_read_json(Request, Json),
    Json = json([name=Name, email=Email, age=Age]),
    % –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    NewUser = json([id=4, name=Name, email=Email, age=Age, created_at="2024-01-04T10:00:00Z"]),
    create_response(true, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω", NewUser, Response),
    cors_enable,
    reply_json(Response).

% –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
handle_update_user(Request) :-
    http_parameters(Request, [id(Id, [integer])]),
    http_read_json(Request, Json),
    (   user_exists(Id)
    ->  % –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        get_user_by_id(Id, User),
        create_response(true, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω", User, Response)
    ;   create_response(false, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", null, Response)
    ),
    cors_enable,
    reply_json(Response).

% –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
handle_delete_user(Request) :-
    http_parameters(Request, [id(Id, [integer])]),
    (   user_exists(Id)
    ->  % –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        create_response(true, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", null, Response)
    ;   create_response(false, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", null, Response)
    ),
    cors_enable,
    reply_json(Response).

% –û–±—Ä–∞–±–æ—Ç—á–∏–∫ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è CORS
handle_options(_Request) :-
    cors_enable,
    format('Access-Control-Allow-Origin: *~n'),
    format('Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS~n'),
    format('Access-Control-Allow-Headers: Content-Type, Authorization~n'),
    format('~n').

% –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
:- http_handler(root(.), handle_root, []).
:- http_handler(root(users), handle_users, [methods([get])]).
:- http_handler(root(users/), handle_user_id, [methods([get])]).
:- http_handler(root(users), handle_create_user, [methods([post])]).
:- http_handler(root(users/), handle_update_user, [methods([put])]).
:- http_handler(root(users/), handle_delete_user, [methods([delete])]).
:- http_handler(root(.), handle_options, [methods([options])]).

% –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
start_server :-
    server_port(Port),
    format('üöÄ Prolog –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ~w~n', [Port]),
    format('üìñ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:~w~n', [Port]),
    http_server(http_dispatch, [port(Port)]).

% –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
demo_server :-
    format('üöÄ Prolog –≤–µ–±-—Å–µ—Ä–≤–µ—Ä (–¥–µ–º–æ –≤–µ—Ä—Å–∏—è)~n'),
    format('üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:~n'),
    format('GET / - –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞~n'),
    format('GET /users - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π~n'),
    format('GET /users/{id} - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID~n'),
    format('POST /users - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è~n'),
    format('PUT /users/{id} - –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è~n'),
    format('DELETE /users/{id} - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è~n'),
    format('~n'),
    format('–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤:~n'),
    format('~n'),
    format('=== GET / ===~n'),
    handle_root(_),
    format('~n'),
    format('=== GET /users ===~n'),
    handle_users(_),
    format('~n'),
    format('=== GET /users/1 ===~n'),
    handle_user_id(json([id=1])),
    format('~n'),
    format('=== GET /users/999 (–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π) ===~n'),
    handle_user_id(json([id=999])),
    format('~n'),
    format('–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!~n').

% –ó–∞–ø—É—Å–∫ –¥–µ–º–æ
:- demo_server.

